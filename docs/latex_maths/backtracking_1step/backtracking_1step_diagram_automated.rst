====================================================
Backtracking 1 step diagram - automated
====================================================

| The LaTeX in this section is for one 1-step backtracking diagram.
| The values in the diagram can be randomly generated by python.
| The required LaTeX and python files are:
| :download:`backtrack_1step_template.tex<makers/backtrack_1step_template.tex>`
| :download:`backtrack_1step_diagram_template.tex<makers/backtrack_1step_diagram_template.tex>`
| :download:`backtracking_1step_diagram_maker.py<makers/backtracking_1step_diagram_maker.py>`

| The 2 custom python modules required are:
| :download:`backtracking_functions.py<makers/backtracking_functions.py>`
| :download:`magick_pdf_to_png.py<makers/magick_pdf_to_png.py>`

| The python file, **backtracking_1step_diagram_maker**, when run, will ask for 2 inputs:
| Choose the arithmetic process: ``"Enter 1, 2, 3, 4 or 5 for +, -, X, /, random"``
| Choose the file name base: ``"Enter the base filename to be added to the prefix bt1_:"``.
| The filename will have "_q" added for the question diagram and "_ans" for the answer diagram. 
| e.g If the user inputs "add1a" the file name will be "bt1_add1a_q".

----

A 1-step backtracking diagram with answers
--------------------------------------------

.. grid:: 4
   :gutter: 0
   :margin: 0
   :padding: 0

   .. grid-item-card::  

      addition_q
      ^^^
      :download:`png<diagrams/bt1_+_q.png>`
      :download:`pdf<diagrams/bt1_+_q.pdf>`
      :download:`tex<diagrams/bt1_+_q.tex>`

      .. figure:: diagrams/bt1_+_q.png
         :width: 300
         :alt: bt1_+_q
         :figclass: align-center

   .. grid-item-card::  
      
      addition_ans
      ^^^
      :download:`png<diagrams/bt1_+_ans.png>`
      :download:`pdf<diagrams/bt1_+_ans.pdf>`
      :download:`tex<diagrams/bt1_+_ans.tex>`

      .. figure:: diagrams/bt1_+_ans.png
         :width: 300
         :alt: bt1_+_ans
         :figclass: align-center

   .. grid-item-card::  

      subtraction_q
      ^^^
      :download:`png<diagrams/bt1_-_q.png>`
      :download:`pdf<diagrams/bt1_-_q.pdf>`
      :download:`tex<diagrams/bt1_-_q.tex>`

      .. figure:: diagrams/bt1_-_q.png
         :width: 300
         :alt: bt1_-_q
         :figclass: align-center

   .. grid-item-card::  
      
      subtraction_ans
      ^^^
      :download:`png<diagrams/bt1_-_ans.png>`
      :download:`pdf<diagrams/bt1_-_ans.pdf>`
      :download:`tex<diagrams/bt1_-_ans.tex>`

      .. figure:: diagrams/bt1_-_ans.png
         :width: 300
         :alt: bt1_-_ans
         :figclass: align-center

.. grid:: 4
   :gutter: 0
   :margin: 0
   :padding: 0

   .. grid-item-card::  

      multiplication_q
      ^^^
      :download:`png<diagrams/bt1_x_q.png>`
      :download:`pdf<diagrams/bt1_x_q.pdf>`
      :download:`tex<diagrams/bt1_x_q.tex>`

      .. figure:: diagrams/bt1_x_q.png
         :width: 300
         :alt: bt1_x_q
         :figclass: align-center

   .. grid-item-card::  
      
      multiplication_ans
      ^^^
      :download:`png<diagrams/bt1_x_ans.png>`
      :download:`pdf<diagrams/bt1_x_ans.pdf>`
      :download:`tex<diagrams/bt1_x_ans.tex>`

      .. figure:: diagrams/bt1_x_ans.png
         :width: 300
         :alt: bt1_x_ans
         :figclass: align-center

   .. grid-item-card::  

      division_q
      ^^^
      :download:`png<diagrams/bt1_div_q.png>`
      :download:`pdf<diagrams/bt1_div_q.pdf>`
      :download:`tex<diagrams/bt1_div_q.tex>`

      .. figure:: diagrams/bt1_div_q.png
         :width: 300
         :alt: bt1_div_q
         :figclass: align-center

   .. grid-item-card::  
      
      division_ans
      ^^^
      :download:`png<diagrams/bt1_div_ans.png>`
      :download:`pdf<diagrams/bt1_div_ans.pdf>`
      :download:`tex<diagrams/bt1_div_ans.tex>`

      .. figure:: diagrams/bt1_div_ans.png
         :width: 300
         :alt: bt1_div_ans
         :figclass: align-center

----

Splitting the LaTeX and modifying it for python
---------------------------------------------------

| The LaTeX from a single 1-step equation is used as a starting point, split into 2 and modified.
| The Document template contains the preamble and the scaffold for the document.
| The Diagram template contains the backtacking diagram LaTeX.

Document template
~~~~~~~~~~~~~~~~~~~~

| The LaTeX 1-step worksheet template is below.
| :download:`document_template<makers/backtrack_1step_template.tex>`

.. literalinclude:: makers/backtrack_1step_template.tex
   :linenos:

| ``<<diagram>>`` is placeholder text for the text that python will use to add the LaTeX for the backtracking diagram.

Diagram template
~~~~~~~~~~~~~~~~~~~~

| The LaTeX 1-step diagram template is below.
| :download:`diagram_template<makers/backtrack_1step_diagram_template.tex>`

.. literalinclude:: makers/backtrack_1step_diagram_template.tex
   :linenos:

Example of a placeholder
~~~~~~~~~~~~~~~~~~~~~~~~~~

| The line ``\node[backtrack] (boxB) [right=1cm of boxA] {$<<boxB>>$}`` has a placeholder `<<boxB>>` which is replaced by python.
| Other placeholders are marked by `<<   >>`.

Python to create a 1 step diagram
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

| The Python to create a 1 step diagram is below.
| This script creates a LaTeX file with a diagram and converts it to PDF and PNG formats. It does the following steps:

- This Python code requires two user inputs: a1 to 4 to choose the arithmetic operation, and the filename to be used.
- The code reads in three template files: `tex_template_path`, `texans_template_path`, and `tex_diagram_template_path`. The contents of these files are stored in the variables `tex_template_txt`, `tex_template_txt_ans`, and `tex_diagram_template_txt`, respectively.
- The code then calls the `make1_diagram` function, passing in `tex_diagram_template_txt` as an argument. `kv = btf.get_1step_process_dict()` gets the dictionary containing the values to be placed in the diagram template. The `make1_diagram` function generates a diagram and returns two values: `diagram_text` and `diagram_text_ans`. These values are then used to replace the `<<diagram>>` placeholder in the `tex_template_txt` and `tex_template_txt_ans` variables.
- The resulting text is then written to two output files: `tex_output_path` and `tex_output_path_ans`. 
- The code then waits for 1 second to ensure that the files have been created before calling the `convert_to_pdf` function to convert these TeX files to PDFs. The PDFs are saved to the paths specified by the `pdf_path` and `pdf_path_ans` variables.
- After waiting for another second, the code calls the `magick_pdf_to_png.convert_pdf_to_png` function to convert the PDFs to PNGs. The PNGs are saved to the paths specified by the `png_path` and `png_path_ans` variables.
- The script prints "starting" and "finished" messages to indicate when it begins and ends its execution.

:download:`python 1step diagram maker<makers/backtracking_1step_diagram_maker.py>`

.. literalinclude:: makers/backtracking_1step_diagram_maker.py
   :linenos:


